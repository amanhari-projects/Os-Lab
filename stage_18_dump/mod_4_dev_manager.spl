//<----------device manager-------->
print"---manager--";
breakpoint;
alias funcnum R1;
alias curpid R2;
alias out R3;           //stores out for write and control bit for disk
alias pgnum R4;
alias disknum R5;
if (funcnum==3) then

    //----calling the acquire terminal------>
    multipush(R1,R2,R3,R4,R5);
    funcnum = 8;
    call MOD_0;
    multipop(R1,R2,R3,R4,R5);

    print out;

    //----calling the release terminal---->
    multipush(R1,R2,R3,R4,R5);
    funcnum = 9;
    call MOD_0;
    multipop(R1,R2,R3,R4,R5);
    return;
else 
    if(funcnum==4) then
        multipush(R1,R2,R3,R4,R5);
        funcnum = 8;
        call MOD_0;
        multipop(R1,R2,R3,R4,R5);

        read;

        [PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+4] = WAIT_TERMINAL;
        multipush(R1,R2,R3,R4);
        call MOD_5;
        multipop(R1,R2,R3,R5);
        alias addr R4;
        addr = [PTBR + 2*(R3/512)]*512 + (R3%512);
        [addr] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16+8];
        return;
    else
        if(funcnum==2)  then
               multipush(R1,R2,R3,R4,R5);
               funcnum = 3;
               call MOD_0;
               multipop(R1,R2,R3,R4,R5);

               //<-----setting disk status table--->
               //[DISK_STATUS_TABLE] = 1;
               [DISK_STATUS_TABLE+1] = out;
               [DISK_STATUS_TABLE+2] = pgnum ;                //page number
               [DISK_STATUS_TABLE+3] = disknum;                  //disk number
               //[DISK_STATUS_TABLE+4] = curpid;
               if(out == 0) then
                    load(pgnum,disknum);
                else    
                    store(pgnum,disknum);
                endif;
                [PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+4] = WAIT_DISK;
                multipush(R1,R2,R3,R4,R5);
                call MOD_5;
                print "ret dev m";
                multipop(R1,R2,R3,R4,R5);
                return;
        endif;
    endif;
endif;
