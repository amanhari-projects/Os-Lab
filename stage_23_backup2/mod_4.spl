//<----------device manager-------->
//print"---manager--";
breakpoint;
alias funcnum R1;
alias curpid R2;
alias out R3;

if (funcnum==3) then

    //----calling the acquire terminal------>
    multipush(R1,R2,R3);
    funcnum = 8;
    call MOD_0;
    multipop(R1,R2,R3);

    print out;

    //----calling the release terminal---->
    multipush(R1,R2,R3);
    funcnum = 9;
    call MOD_0;
    multipop(R1,R2,R3);
    return;
else 
    if(funcnum==4) then
        multipush(R1,R2,R3);
        funcnum = 8;
        call MOD_0;
        multipop(R1,R2,R3);

        read;

        [PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+4] = WAIT_TERMINAL;
        multipush(R1,R2,R3);
        call MOD_5;
        multipop(R1,R2,R3);
        alias addr R4;
        addr = [PTBR + 2*(R3/512)]*512 + (R3%512);
        [addr] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16+8];
        return;
    else
        if(funcnum==2)  then
            multipush(R1,R2,R3,R4,R5);
            funcnum = 3;
            call MOD_0;
            multipop(R1,R2,R3,R4,R5);

            [DISK_STATUS_TABLE+1] = R3;
            [DISK_STATUS_TABLE+2] = R4;
            [DISK_STATUS_TABLE+3] = R5;

            if(R3==0)   then
                load(R4,R5);
            else 
                store(R4,R5);
            endif;

            [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=WAIT_DISK;
            multipush(R1,R2,R3,R4,R5);
            call MOD_5;
            //print "ret mod 4";
            multipop(R1,R2,R3,R4,R5);
            return;
        endif;
    endif;
endif;
