[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16+9)] = 8;     //mode flag
[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+13] = SP;
SP = [PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+11]*512-1;

//get pcb function
R1 = [SYSTEM_STATUS_TABLE+1];
R2 = 1;
call PROCESS_MANAGER;
alias newpid R10;
newpid = R0;
if(R0==-1)  then
    alias usersp R3;
    usersp = [PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+13];
    alias ret R2;
    ret = [PTBR + (2*((usersp-1)/512))]*512+((usersp-1)%512);
    [ret] = -1;
    SP = [PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+13];
    [PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16+9)] = 0;     //mode flag
    ireturn;
endif;

//allocating the heap if parent doesnt have
alias ptb R3;   
ptb = [PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16+14)];
if([ptb+4]==-1) then
    multipush(R1,R3,R10);
    R1 = [SYSTEM_STATUS_TABLE+1];
    R2 = 1;
    call MEMORY_MANAGER;
    multipop(R1,R3,R10);
    [ptb+4] = R0;
    [ptb+5] = "1110";
endif;
if([ptb+6]==-1) then
    multipush(R1,R3,R10);
    R1 = [SYSTEM_STATUS_TABLE+1];
    R2 = 1;
    call MEMORY_MANAGER;
    multipop(R1,R3,R10);
    [ptb+6] = R0;
    [ptb+7] = "1110";
endif;

alias val R4;
alias count R5;
count = 16;
val = 0;
while(val<3)    do
    
    if(val==2)  then
        multipush(R1,R2,R3,R4,R5,R10);
        R1 = [SYSTEM_STATUS_TABLE+1];
        R2 = 1;
        call MEMORY_MANAGER;
        multipop(R1,R2,R3,R4,R5,R10);
        [PROCESS_TABLE+(newpid*16)+11] = R0;    //alloting user area page
    else
        multipush(R1,R2,R3,R4,R5,R10);
        R1 = [SYSTEM_STATUS_TABLE+1];
        R2 = 1;
        call MEMORY_MANAGER;
        multipop(R1,R2,R3,R4,R5,R10);
        [PTBR+count] = R0;                      //alloting the stck for child
        [PTBR+count] = "0110";
        count=count+2;
   endif;
    val=val+1;
endwhile;

alias val1 R5;
alias val2 R6;

val1 = PROCESS_TABLE+(newpid*16);
val2 = PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16);
//setting up the childs table 
[val1+3] = [val2+3]; //userid
[val1+6] = [val2+6]; //swap flg
[val1+10] = [val2+10]; //swp sts
[val1+7] = [val2+7]; //INODE INDEX
[val1+13] = [val2+13];
[val1+0] = 0;  //TICK
[val1+12] = 0; //KPTR
[val1+9] = 0;  //MODE 
[val1+2] = [SYSTEM_STATUS_TABLE+1];
[val1+4] = CREATED;

alias count R7;

count = 1;
R5 = [PROCESS_TABLE+(newpid*16)+11]+1;
R6 = [PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+11]+1;

while(count<17) do
    [val1*512-count]=[val2*512-count];
    count=count+1;
endwhile;

val1 = DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE+1]*10;
val2 = DISK_MAP_TABLE + newpid*10;
count = 2;
while(count<10) do
    [val2+count] = [val1+count];
    count=count+1;
endwhile;

val1 = [PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+14];
count = 0;

while(count<16) do
    [PTBR+count]=[val1+count];
    [MEMORY_FREE_LIST+[PTBR+count]]=[MEMORY_FREE_LIST+[PTBR+count]]+1;
    count=count+1;
endwhile;

val1 = [PROCESS_TABLE+(16*[SYSTEM_STATUS_TABLE+1])+11];
val2 = [PROCESS_TABLE+(newpid*16)+11];
count=0;
while(count<(512*2))    do
    [val1+count]=[val2+count];
    count=count+1;
endwhile;

[[PROCESS_TABLE+(newpid*16)+11]*512] = BP;
alias usersp R8;
usersp = [PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+13];
alias ret R9;
ret = [PTBR + (2*((usersp-1)/512))]*512+((usersp-1)%512);
[ret] = R10;

usersp = [PROCESS_TABLE+(newpid*16)+13];
ret = [PTBR + (2*((usersp-1)/512))]*512+((usersp-1)%512);
[ret] = 0;

SP = [PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+13];
[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16+9)] = 0;     //mode flag
ireturn;
