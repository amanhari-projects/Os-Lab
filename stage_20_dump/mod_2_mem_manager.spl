print "--memory manager--";
//R1 = pid 
//R2 = funcnum 
//R3 = argument 
//R0 = return

alias funcnum R2;

if(funcnum==1)  then        //get free page
    [SYSTEM_STATUS_TABLE+3] = [SYSTEM_STATUS_TABLE+3]+1;
    while([SYSTEM_STATUS_TABLE+2]==0)   do
        [PROCESS_TABLE+(R1*16)+4] = WAIT_MEM;
        multipush(R1,R2,R3,R4);
        call MOD_5;
        multipop(R1,R2,R3,R4);
    endwhile;
    [SYSTEM_STATUS_TABLE+3] = [SYSTEM_STATUS_TABLE+3]-1;
    [SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2]-1;

    alias val R4;
    val = 0;
    while(val<128) do
        if([MEMORY_FREE_LIST + val]==0) then
            [MEMORY_FREE_LIST + val] = 1;
            break;
        endif;
        val=val+1;
    endwhile;
    R0 = val;
    return;
else if(funcnum == 2)   then
    //print "--free pg--";
    breakpoint;
    [MEMORY_FREE_LIST + R3] = [MEMORY_FREE_LIST + R3] - 1;
    if([MEMORY_FREE_LIST + R3]==0)  then
        [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] +1;
        alias val R4;
        alias regval R5;
        alias count R6;
        val=MAX_PROC_NUM;
        while(val>0)   do
            regval = PROCESS_TABLE+(val-1)*16+4;
            if([regval] == WAIT_MEM)  then
                [regval] = READY;
            endif;
            val=val-1;
        endwhile;
        //print "======pgtbl===";
        breakpoint;
        return;
    endif;
else if(funcnum==5) then
    breakpoint;
    alias val R4;
    val = 0;
    alias regval R5;
    alias ptb R6;
    while(val<MAX_PROC_NUM) do
        regval = [DISK_MAP_TABLE+val*10 + 4];
        if(R3==regval)  then
            ptb = [PROCESS_TABLE+(val*16)+14];
            if([ptb+8]!=-1)    then
                R0 = [ptb+8];
                [MEMORY_FREE_LIST+R0] = [MEMORY_FREE_LIST+R0]+1;
                return;
            endif;
            break;
        endif;
        regval = [DISK_MAP_TABLE+val*10 + 5];
        if(R3==regval)  then
            ptb = [PROCESS_TABLE+(val*16)+14];
            if([ptb+10]!=-1)    then
                R0 = [ptb+10];
                [MEMORY_FREE_LIST+R0] = [MEMORY_FREE_LIST+R0]+1;
                return;
            endif;
            break;
        endif;
        regval = [DISK_MAP_TABLE+val*10 + 6];
        if(R3==regval)  then
            ptb = [PROCESS_TABLE+(val*16)+14];
            if([ptb+12]!=-1)    then
                R0 = [ptb+12];
                [MEMORY_FREE_LIST+R0] = [MEMORY_FREE_LIST+R0]+1;
                return;
            endif;
            break;
        endif;
        regval = [DISK_MAP_TABLE+val*10 +7];
        if(R3==regval)  then
            ptb = [PROCESS_TABLE+(val*16)+14];
            if([ptb+14]!=-1)    then
                R0 = [ptb+14];
                [MEMORY_FREE_LIST+R0] = [MEMORY_FREE_LIST+R0]+1;
                return;
            endif;
            break;
        endif;
        val = val+1;
    endwhile;
    multipush(R1,R2,R3);
    R2 = 1;
    call MEMORY_MANAGER;
    multipop(R1,R2,R3);
    multipush(R0,R1,R2,R3);
    R2 = R1;
    R1 = 2;
    R4 = R0;
    R5 = R3;
    R3 = 0;
    call MOD_4;
    multipop(R0,R1,R2,R3);
    return;
else if(funcnum==4)     then
    [DISK_FREE_LIST+R3] = [DISK_FREE_LIST+R3]-1;
    return;
endif;
endif;
endif;
endif;
return;