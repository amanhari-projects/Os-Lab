//<-------loading the data programs-------->

loadi(65,7);        //load the init
loadi(66,8);

loadi(22,35);       //load the int=10
loadi(23,36);

loadi(2,15);        //load the exception
loadi(3,16);

loadi(63,13);       //load the library
loadi(64,14);

loadi(4,17);        //load timer interupt
loadi(5,18);

loadi(16,29);       //load the int=7 (write) timer
loadi(17,30);

loadi(83,69);       //load the even value print program

loadi(40,53);
loadi(41,54);

loadi(48,61);
loadi(49,62);

//<--------setting up the process table initial values to terminated--->

alias val R1;
alias regval R2;
val=MAX_PROC_NUM;
while(val>0)   do
    regval = PROCESS_TABLE+(val-1)*16+4;
    [regval] = TERMINATED;
    regval = PROCESS_TABLE+(val-1)*16+1;
    [regval] = -1;
    val=val-1;
endwhile;

//<--------setup the page table and system table for init----->

PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;

[PTBR+0] = 63;                  //library
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

[PTBR+4] = 78;                  //heap
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

[PTBR+8] = 65;                  //code
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

[PTBR+16] = 76;                 //stack
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

[76*512] = [65*512+1];


[PROCESS_TABLE + 16 + 1] = 1;        //SETTING UP THE PROCESS TABLE-->PID
[PROCESS_TABLE + 16 + 4] = CREATED;   //SETTING UP THE PROCESS_TABLE-->STATE
[PROCESS_TABLE + 16 + 11] = 80;      //-->USER AREA PAGE
[PROCESS_TABLE + 16 + 12] = 0;       //SETTING UP THE PROCESS_TABLE-->KPTR
[PROCESS_TABLE + 16 + 13] = 8*512;   //SETTING UP THE PROCESS_TABLE-->UPTR
[PROCESS_TABLE + 16 + 14] = PTBR;
[PROCESS_TABLE + 16 + 15] = 10;


//<--------setup the page table and system table for exec----->

PTBR = PAGE_TABLE_BASE+40;
PTLR = 10;

[PTBR+0] = 63;                  //library
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

[PTBR+4] = 86;                  //heap
[PTBR+5] = "0110";
[PTBR+6] = 87;
[PTBR+7] = "0110";

[PTBR+8] = 83;                  //code
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

[PTBR+16] = 84;                 //stack
[PTBR+17] = "0110";
[PTBR+18] = 85;
[PTBR+19] = "0110";

[84*512] = [83*512+1];


[PROCESS_TABLE + 32 + 1] = 2;        //SETTING UP THE PROCESS TABLE-->PID
[PROCESS_TABLE + 32 + 4] = CREATED;   //SETTING UP THE PROCESS_TABLE-->STATE
[PROCESS_TABLE + 32 + 11] = 88;      //-->USER AREA PAGE
[PROCESS_TABLE + 32 + 12] = 0;       //SETTING UP THE PROCESS_TABLE-->KPTR
[PROCESS_TABLE + 32 + 13] = 8*512;   //SETTING UP THE PROCESS_TABLE-->UPTR
[PROCESS_TABLE + 32 + 14] = PTBR;
[PROCESS_TABLE + 32 + 15] = 10;

//<-------------setting up the initial states of the table----->
[TERMINAL_STATUS_TABLE] = 0;

return;
