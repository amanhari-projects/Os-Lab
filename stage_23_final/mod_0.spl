//<---------resource manager-------->
print"---resource---";
breakpoint;

alias funcnum R1;
alias currentpid R2;

if (funcnum==8) then
    multipush(R1,R2,R3);
    alias status R4;
    status = [TERMINAL_STATUS_TABLE];
    while(status==1)    do
        [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=WAIT_TERMINAL;
        multipush(R1,R2,R3,R4);
        call MOD_5; 
        //print"--ret mod 0";
        //----calling scheduler---->
        multipop(R1,R2,R3,R4);
    endwhile;
    multipop(R1,R2,R3);
    [TERMINAL_STATUS_TABLE] = 1;
    [TERMINAL_STATUS_TABLE + 1] = [SYSTEM_STATUS_TABLE + 1];
    return;
else    if(funcnum==9)  then    
        alias termpid R4;
        termpid = [TERMINAL_STATUS_TABLE+1];
        if(termpid!=currentpid) then    
            alias ret R0;
            ret = -1;
            return;
        endif;
        [TERMINAL_STATUS_TABLE]=0;
        alias val R5;
        alias stat R6;
        val=0;
        while(val!=MAX_PROC_NUM)    do
            stat = [PROCESS_TABLE+(val*16)+1];
            if(stat!=-1)    then
                stat = [PROCESS_TABLE+(val*16)+4];
                if(stat==WAIT_TERMINAL) then    
                    [PROCESS_TABLE+(val*16)+4] = READY;
                endif;
            endif;
            val=val+1;
        endwhile;
        alias ret R0;
        ret=0;
        return;
else    if(funcnum==3)  then                    //acquire disk
            while([DISK_STATUS_TABLE]==1)   do
                [PROCESS_TABLE+(currentpid*16)+4] = WAIT_DISK;
                multipush(R1,R2);
                call MOD_5;
                multipop(R1,R2);
            endwhile;

            [DISK_STATUS_TABLE] = 1;
            [DISK_STATUS_TABLE+4] = currentpid;
            return;
        
else    if(funcnum==6)  then    //<----acquire semaphore
            alias count R6;
            count = 0;
            while(count<MAX_SEM_COUNT)  do
                if([SEMAPHORE_TABLE+count*4+1]==0)  then
                    [SEMAPHORE_TABLE+count*4] = -1;
                    [SEMAPHORE_TABLE+count*4+1] = 1;
                    R0 = count;
                    return;
                endif;
                count=count+1;
            endwhile;
            R0 = -1;
            return;
else    if(funcnum==7)  then    //<----release semaphore
        alias count R6;
        count = [PROCESS_TABLE+(R2*16)+11]+1;
        count=[count*512-R3+1];
        if([SEMAPHORE_TABLE+count*4] == 1)  then
            [SEMAPHORE_TABLE+count*4] = -1;
            alias num R7;
            num=0;
            while(num<MAX_PROC_NUM) do
                if([PROCESS_TABLE+(num*16+4)]==WAIT_SEMAPHORE)  then
                    if([PROCESS_TABLE+(num*16+5)]==count)   then
                        [PROCESS_TABLE+(num*16+4)]=READY;
                endif;
                endif;
                num = num+1;
            endwhile;
            [SEMAPHORE_TABLE+count*4+1] = [SEMAPHORE_TABLE+count*4+1]-1;
            return;
        endif;
        return;
else    if(funcnum==4) then    //acquire inode
        // R2-->pid
        // R3-->inode indx
        alias inodeindx R3;
        while([FILE_STATUS_TABLE+4*inodeindx]!=-1)   do
            [PROCESS_TABLE+R1*16+4]=WAIT_FILE;
            [PROCESS_TABLE+R1*16+5]=inodeindx;
            multipush(R1,R2,R3);
            call MOD_5;
            multipop(R1,R2,R3);
        endwhile;
        if([INODE_TABLE+16*inodeindx+1]==-1)    then
                R0 = -1;
                return;
        endif;
        [FILE_STATUS_TABLE+4*inodeindx]=R1;     //lock the file
        R0 = -1;
        return;
else    if(funcnum==5)  then    //release inode
        // R2-->pid
        // R3-->inode index
        alias inodeindx R3;
        if([FILE_STATUS_TABLE+4*inodeindx]!=R1) then
            R0 = -1;
            return;
        endif;
        [FILE_STATUS_TABLE+4*inodeindx]=-1;
        alias val R5;
        val = 0;
        while(val<MAX_PROC_NUM) do
            if([PROCESS_TABLE+val*16+4]==WAIT_FILE) then
                if([PROCESS_TABLE+val*16+5]==inodeindx) then
                    [PROCESS_TABLE+R1*16+4]=READY;
                    [PROCESS_TABLE+R1*16+5]=-1;   
                endif;
            endif;
            val = val+1;
        endwhile;
        R0 = 0;
        return;
endif;
endif;
endif;
endif;
endif;
endif;
endif;

            

